>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> 'area' in dir(BaseGeometry)
True

>>> 'integer_validator' in dir(BaseGeometry)
True

>>> BaseGeometry.area
<function BaseGeometry.area at 0x...>

>>> bg.integer_validator
<bound method BaseGeometry.integer_validator of <7-base_geometry.BaseGeometry object at 0x...>>

>>> dir(bg) == dir(BaseGeometry)
True

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> bg.integer_validator("name", -23)
Traceback (most recent call last):
ValueError: name must be greater than 0

>>> bg.integer_validator("name", 0)
Traceback (most recent call last):
ValueError: name must be greater than 0

>>> bg.integer_validator("name", 3)

>>> def test_i(tests=[]):
...     for test in tests:
...         try:
...             bg.integer_validator("name", test)
...         except Exception as e:
...             print("[{}] {} for type {}".format(e.__class__.__name__, e, type(test)))

>>> tests = [True, 1.24, -76.87, set(), [1, 2], "a string", {"a":1}, ("11", 3), test_i, bg, BaseGeometry, None]
>>> test_i(tests)
[TypeError] name must be an integer for type <class 'float'>
[TypeError] name must be an integer for type <class 'float'>
[TypeError] name must be an integer for type <class 'set'>
[TypeError] name must be an integer for type <class 'list'>
[TypeError] name must be an integer for type <class 'str'>
[TypeError] name must be an integer for type <class 'dict'>
[TypeError] name must be an integer for type <class 'tuple'>
[TypeError] name must be an integer for type <class 'function'>
[TypeError] name must be an integer for type <class '7-base_geometry.BaseGeometry'>
[TypeError] name must be an integer for type <class 'type'>
[TypeError] name must be an integer for type <class 'NoneType'>
